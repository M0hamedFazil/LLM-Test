"sql_query","pyspark_query"
"SELECT c.customer_id, c.customer_name, SUM(o.amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING SUM(o.amount) > 1000 ORDER BY total_spent DESC;","df_customers.join(df_orders, df_customers.customer_id == df_orders.customer_id).groupBy('customer_id', 'customer_name').agg({'amount': 'sum'}).withColumnRenamed('sum(amount)', 'total_spent').filter(col('total_spent') > 1000).orderBy(col('total_spent').desc())"
"WITH ranked_sales AS (SELECT s.sales_id, s.sales_date, s.amount, ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY s.sales_date DESC) AS rn FROM sales s) SELECT * FROM ranked_sales WHERE rn = 1;","df_sales.withColumn('rn', row_number().over(Window.partitionBy('customer_id').orderBy(col('sales_date').desc()))).filter(col('rn') == 1)"
"SELECT e.employee_id, e.first_name, e.last_name, d.department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.department_id WHERE e.salary > (SELECT AVG(salary) FROM employees);","df_employees.join(df_departments, df_employees.department_id == df_departments.department_id, 'left').filter(df_employees.salary > df_employees.agg({'salary': 'avg'}).first()[0])"
"SELECT p.product_id, p.product_name, COUNT(o.order_id) AS total_orders FROM products p JOIN order_items o ON p.product_id = o.product_id GROUP BY p.product_id, p.product_name HAVING COUNT(o.order_id) > 50;","df_products.join(df_order_items, df_products.product_id == df_order_items.product_id).groupBy('product_id', 'product_name').agg({'order_id': 'count'}).withColumnRenamed('count(order_id)', 'total_orders').filter(col('total_orders') > 50)"
"SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id HAVING AVG(salary) > 70000;","df_employees.groupBy('department_id').agg({'salary': 'avg'}).withColumnRenamed('avg(salary)', 'avg_salary').filter(col('avg_salary') > 70000)"
"SELECT o.order_id, o.order_date, c.customer_name, SUM(oi.quantity * oi.unit_price) AS order_total FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN customers c ON o.customer_id = c.customer_id GROUP BY o.order_id, o.order_date, c.customer_name ORDER BY order_total DESC;","df_orders.join(df_order_items, df_orders.order_id == df_order_items.order_id).join(df_customers, df_orders.customer_id == df_customers.customer_id).groupBy('order_id', 'order_date', 'customer_name').agg({'quantity': 'sum', 'unit_price': 'sum'}).withColumn('order_total', col('sum(quantity)') * col('sum(unit_price)')).orderBy(col('order_total').desc())"
"WITH sales_totals AS (SELECT customer_id, SUM(amount) AS total_sales FROM sales GROUP BY customer_id) SELECT c.customer_name, st.total_sales FROM customers c JOIN sales_totals st ON c.customer_id = st.customer_id WHERE st.total_sales > 5000;","df_sales.groupBy('customer_id').agg({'amount': 'sum'}).withColumnRenamed('sum(amount)', 'total_sales').join(df_customers, df_sales.customer_id == df_customers.customer_id).filter(col('total_sales') > 5000)"
"SELECT e.department_id, MIN(e.salary) AS min_salary, MAX(e.salary) AS max_salary, AVG(e.salary) AS avg_salary FROM employees e GROUP BY e.department_id;","df_employees.groupBy('department_id').agg({'salary': 'min', 'salary': 'max', 'salary': 'avg'}).withColumnRenamed('min(salary)', 'min_salary').withColumnRenamed('max(salary)', 'max_salary').withColumnRenamed('avg(salary)', 'avg_salary')"
"SELECT p.product_id, p.product_name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY p.product_id, p.product_name ORDER BY total_quantity DESC;","df_products.join(df_order_items, df_products.product_id == df_order_items.product_id).join(df_orders, df_order_items.order_id == df_orders.order_id).filter((col('order_date') >= '2024-01-01') & (col('order_date') <= '2024-12-31')).groupBy('product_id', 'product_name').agg({'quantity': 'sum'}).withColumnRenamed('sum(quantity)', 'total_quantity').orderBy(col('total_quantity').desc())"
"SELECT c.customer_id, c.customer_name FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id);","df_customers.join(df_orders, df_customers.customer_id == df_orders.customer_id, 'left_anti')"
"SELECT e.employee_id, e.first_name, e.last_name FROM employees e WHERE e.manager_id IS NULL;","df_employees.filter(df_employees.manager_id.isNull())"
"SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;","df_departments.join(df_employees, df_departments.department_id == df_employees.department_id, 'left').groupBy('department_name').agg({'employee_id': 'count'}).withColumnRenamed('count(employee_id)', 'employee_count')"
"WITH monthly_sales AS (SELECT DATE_TRUNC('month', s.sales_date) AS sales_month, SUM(s.amount) AS total_sales FROM sales s GROUP BY DATE_TRUNC('month', s.sales_date)) SELECT sales_month, total_sales FROM monthly_sales ORDER BY total_sales DESC LIMIT 5;","df_sales.withColumn('sales_month', month(col('sales_date'))).groupBy('sales_month').agg({'amount': 'sum'}).withColumnRenamed('sum(amount)', 'total_sales').orderBy(col('total_sales').desc()).limit(5)"
"SELECT c.customer_name, COUNT(o.order_id) AS num_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) > 10;","df_customers.join(df_orders, df_customers.customer_id == df_orders.customer_id).groupBy('customer_name').agg({'order_id': 'count'}).withColumnRenamed('count(order_id)', 'num_orders').filter(col('num_orders') > 10)"
"SELECT e.employee_id, e.first_name, e.last_name, e.salary FROM employees e WHERE e.salary > ALL (SELECT salary FROM employees WHERE department_id = 10);","df_employees.filter(df_employees.salary > df_employees.filter(df_employees.department_id == 10).agg({'salary': 'max'}).first()[0])"
"SELECT o.order_id, o.order_date, SUM(oi.quantity * oi.unit_price) AS total_amount FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_date HAVING SUM(oi.quantity * oi.unit_price) > 1000;","df_orders.join(df_order_items, df_orders.order_id == df_order_items.order_id).groupBy('order_id', 'order_date').agg({'quantity': 'sum', 'unit_price': 'sum'}).withColumn('total_amount', col('sum(quantity)') * col('sum(unit_price)')).filter(col('total_amount') > 1000)"
"SELECT product_id, product_name FROM products WHERE price BETWEEN 100 AND 500;","df_products.filter((col('price') >= 100) & (col('price') <= 500))"
"SELECT c.customer_name, SUM(o.amount) AS total_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= '2024-01-01' GROUP BY c.customer_name;","df_customers.join(df_orders, df_customers.customer_id == df_orders.customer_id).filter(col('order_date') >= '2024-01-01').groupBy('customer_name').agg({'amount': 'sum'}).withColumnRenamed('sum(amount)', 'total_amount')"
"WITH recursive_manager AS (SELECT employee_id, manager_id FROM employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.manager_id FROM employees e JOIN recursive_manager rm ON e.manager_id = rm.employee_id) SELECT * FROM recursive_manager;","df_employees.filter(df_employees.manager_id.isNull()).unionAll(df_employees.join(df_employees.filter(df_employees.manager_id.isNull()), df_employees.manager_id == df_employees.employee_id, 'inner'))"
"SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id HAVING COUNT(*) > 5;","df_employees.groupBy('department_id').agg({'*': 'count'}).withColumnRenamed('count(1)', 'employee_count').filter(col('employee_count') > 5)